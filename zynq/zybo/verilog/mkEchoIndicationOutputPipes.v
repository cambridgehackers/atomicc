//
// Generated by Bluespec Compiler, version 2015.09.beta2 (build 34689, 2015-09-07)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule methods_heard_enq  CF ( methods_heard2_enq,
// 				 methods_heard2_notFull,
// 				 portalIfc_messageSize_size,
// 				 portalIfc_indications_0_first,
// 				 portalIfc_indications_0_deq,
// 				 portalIfc_indications_1_first,
// 				 portalIfc_indications_1_deq,
// 				 portalIfc_indications_1_notEmpty );
// schedule methods_heard_enq  C ( methods_heard_enq );
//
// schedule methods_heard_notFull  CF ( methods_heard_notFull,
// 				     methods_heard2_enq,
// 				     methods_heard2_notFull,
// 				     portalIfc_messageSize_size,
// 				     portalIfc_indications_0_first,
// 				     portalIfc_indications_0_notEmpty,
// 				     portalIfc_indications_1_first,
// 				     portalIfc_indications_1_deq,
// 				     portalIfc_indications_1_notEmpty,
// 				     portalIfc_intr_status,
// 				     portalIfc_intr_channel );
// schedule methods_heard_notFull  SB ( methods_heard_enq,
// 				     portalIfc_indications_0_deq );
//
// schedule methods_heard2_enq  CF ( methods_heard_enq,
// 				  methods_heard_notFull,
// 				  portalIfc_messageSize_size,
// 				  portalIfc_indications_0_first,
// 				  portalIfc_indications_0_deq,
// 				  portalIfc_indications_0_notEmpty,
// 				  portalIfc_indications_1_first,
// 				  portalIfc_indications_1_deq );
// schedule methods_heard2_enq  C ( methods_heard2_enq );
//
// schedule methods_heard2_notFull  CF ( methods_heard_enq,
// 				      methods_heard_notFull,
// 				      methods_heard2_notFull,
// 				      portalIfc_messageSize_size,
// 				      portalIfc_indications_0_first,
// 				      portalIfc_indications_0_deq,
// 				      portalIfc_indications_0_notEmpty,
// 				      portalIfc_indications_1_first,
// 				      portalIfc_indications_1_notEmpty,
// 				      portalIfc_intr_status,
// 				      portalIfc_intr_channel );
// schedule methods_heard2_notFull  SB ( methods_heard2_enq,
// 				      portalIfc_indications_1_deq );
//
// schedule portalIfc_messageSize_size  CF ( methods_heard_enq,
// 					  methods_heard_notFull,
// 					  methods_heard2_enq,
// 					  methods_heard2_notFull,
// 					  portalIfc_messageSize_size,
// 					  portalIfc_indications_0_first,
// 					  portalIfc_indications_0_deq,
// 					  portalIfc_indications_0_notEmpty,
// 					  portalIfc_indications_1_first,
// 					  portalIfc_indications_1_deq,
// 					  portalIfc_indications_1_notEmpty,
// 					  portalIfc_intr_status,
// 					  portalIfc_intr_channel );
//
// schedule portalIfc_indications_0_first  CF ( methods_heard_enq,
// 					     methods_heard_notFull,
// 					     methods_heard2_enq,
// 					     methods_heard2_notFull,
// 					     portalIfc_messageSize_size,
// 					     portalIfc_indications_0_first,
// 					     portalIfc_indications_0_notEmpty,
// 					     portalIfc_indications_1_first,
// 					     portalIfc_indications_1_deq,
// 					     portalIfc_indications_1_notEmpty,
// 					     portalIfc_intr_status,
// 					     portalIfc_intr_channel );
// schedule portalIfc_indications_0_first  SB ( portalIfc_indications_0_deq );
//
// schedule portalIfc_indications_0_deq  CF ( methods_heard_enq,
// 					   methods_heard2_enq,
// 					   methods_heard2_notFull,
// 					   portalIfc_messageSize_size,
// 					   portalIfc_indications_1_first,
// 					   portalIfc_indications_1_deq,
// 					   portalIfc_indications_1_notEmpty );
// schedule portalIfc_indications_0_deq  C ( portalIfc_indications_0_deq );
//
// schedule portalIfc_indications_0_notEmpty  CF ( methods_heard_notFull,
// 						methods_heard2_enq,
// 						methods_heard2_notFull,
// 						portalIfc_messageSize_size,
// 						portalIfc_indications_0_first,
// 						portalIfc_indications_0_notEmpty,
// 						portalIfc_indications_1_first,
// 						portalIfc_indications_1_deq,
// 						portalIfc_indications_1_notEmpty,
// 						portalIfc_intr_status,
// 						portalIfc_intr_channel );
// schedule portalIfc_indications_0_notEmpty  SB ( methods_heard_enq,
// 						portalIfc_indications_0_deq );
//
// schedule portalIfc_indications_1_first  CF ( methods_heard_enq,
// 					     methods_heard_notFull,
// 					     methods_heard2_enq,
// 					     methods_heard2_notFull,
// 					     portalIfc_messageSize_size,
// 					     portalIfc_indications_0_first,
// 					     portalIfc_indications_0_deq,
// 					     portalIfc_indications_0_notEmpty,
// 					     portalIfc_indications_1_first,
// 					     portalIfc_indications_1_notEmpty,
// 					     portalIfc_intr_status,
// 					     portalIfc_intr_channel );
// schedule portalIfc_indications_1_first  SB ( portalIfc_indications_1_deq );
//
// schedule portalIfc_indications_1_deq  CF ( methods_heard_enq,
// 					   methods_heard_notFull,
// 					   methods_heard2_enq,
// 					   portalIfc_messageSize_size,
// 					   portalIfc_indications_0_first,
// 					   portalIfc_indications_0_deq,
// 					   portalIfc_indications_0_notEmpty );
// schedule portalIfc_indications_1_deq  C ( portalIfc_indications_1_deq );
//
// schedule portalIfc_indications_1_notEmpty  CF ( methods_heard_enq,
// 						methods_heard_notFull,
// 						methods_heard2_notFull,
// 						portalIfc_messageSize_size,
// 						portalIfc_indications_0_first,
// 						portalIfc_indications_0_deq,
// 						portalIfc_indications_0_notEmpty,
// 						portalIfc_indications_1_first,
// 						portalIfc_indications_1_notEmpty,
// 						portalIfc_intr_status,
// 						portalIfc_intr_channel );
// schedule portalIfc_indications_1_notEmpty  SB ( methods_heard2_enq,
// 						portalIfc_indications_1_deq );
//
// schedule portalIfc_intr_status  CF ( methods_heard_notFull,
// 				     methods_heard2_notFull,
// 				     portalIfc_messageSize_size,
// 				     portalIfc_indications_0_first,
// 				     portalIfc_indications_0_notEmpty,
// 				     portalIfc_indications_1_first,
// 				     portalIfc_indications_1_notEmpty,
// 				     portalIfc_intr_status,
// 				     portalIfc_intr_channel );
// schedule portalIfc_intr_status  SB ( methods_heard_enq,
// 				     methods_heard2_enq,
// 				     portalIfc_indications_0_deq,
// 				     portalIfc_indications_1_deq );
//
// schedule portalIfc_intr_channel  CF ( methods_heard_notFull,
// 				      methods_heard2_notFull,
// 				      portalIfc_messageSize_size,
// 				      portalIfc_indications_0_first,
// 				      portalIfc_indications_0_notEmpty,
// 				      portalIfc_indications_1_first,
// 				      portalIfc_indications_1_notEmpty,
// 				      portalIfc_intr_status,
// 				      portalIfc_intr_channel );
// schedule portalIfc_intr_channel  SB ( methods_heard_enq,
// 				      methods_heard2_enq,
// 				      portalIfc_indications_0_deq,
// 				      portalIfc_indications_1_deq );
//
//
// Ports:
// Name                         I/O  size props
// RDY_methods_heard_enq          O     1
// methods_heard_notFull          O     1
// RDY_methods_heard_notFull      O     1 const
// RDY_methods_heard2_enq         O     1
// methods_heard2_notFull         O     1
// RDY_methods_heard2_notFull     O     1 const
// portalIfc_messageSize_size     O    16 const
// RDY_portalIfc_messageSize_size  O     1 const
// portalIfc_indications_0_first  O    32 reg
// RDY_portalIfc_indications_0_first  O     1 reg
// RDY_portalIfc_indications_0_deq  O     1 reg
// portalIfc_indications_0_notEmpty  O     1 reg
// RDY_portalIfc_indications_0_notEmpty  O     1 const
// portalIfc_indications_1_first  O    32 reg
// RDY_portalIfc_indications_1_first  O     1 reg
// RDY_portalIfc_indications_1_deq  O     1 reg
// portalIfc_indications_1_notEmpty  O     1 reg
// RDY_portalIfc_indications_1_notEmpty  O     1 const
// portalIfc_intr_status          O     1
// RDY_portalIfc_intr_status      O     1 const
// portalIfc_intr_channel         O    32
// RDY_portalIfc_intr_channel     O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// methods_heard_enq_v            I    32 reg
// methods_heard2_enq_v           I    32 reg
// portalIfc_messageSize_size_methodNumber  I    16 unused
// EN_methods_heard_enq           I     1
// EN_methods_heard2_enq          I     1
// EN_portalIfc_indications_0_deq  I     1
// EN_portalIfc_indications_1_deq  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkEchoIndicationOutputPipes(CLK,
				   RST_N,

				   methods_heard_enq_v,
				   EN_methods_heard_enq,
				   RDY_methods_heard_enq,

				   methods_heard_notFull,
				   RDY_methods_heard_notFull,

				   methods_heard2_enq_v,
				   EN_methods_heard2_enq,
				   RDY_methods_heard2_enq,

				   methods_heard2_notFull,
				   RDY_methods_heard2_notFull,

				   portalIfc_messageSize_size_methodNumber,
				   portalIfc_messageSize_size,
				   RDY_portalIfc_messageSize_size,

				   portalIfc_indications_0_first,
				   RDY_portalIfc_indications_0_first,

				   EN_portalIfc_indications_0_deq,
				   RDY_portalIfc_indications_0_deq,

				   portalIfc_indications_0_notEmpty,
				   RDY_portalIfc_indications_0_notEmpty,

				   portalIfc_indications_1_first,
				   RDY_portalIfc_indications_1_first,

				   EN_portalIfc_indications_1_deq,
				   RDY_portalIfc_indications_1_deq,

				   portalIfc_indications_1_notEmpty,
				   RDY_portalIfc_indications_1_notEmpty,

				   portalIfc_intr_status,
				   RDY_portalIfc_intr_status,

				   portalIfc_intr_channel,
				   RDY_portalIfc_intr_channel);
  input  CLK;
  input  RST_N;

  // action method methods_heard_enq
  input  [31 : 0] methods_heard_enq_v;
  input  EN_methods_heard_enq;
  output RDY_methods_heard_enq;

  // value method methods_heard_notFull
  output methods_heard_notFull;
  output RDY_methods_heard_notFull;

  // action method methods_heard2_enq
  input  [31 : 0] methods_heard2_enq_v;
  input  EN_methods_heard2_enq;
  output RDY_methods_heard2_enq;

  // value method methods_heard2_notFull
  output methods_heard2_notFull;
  output RDY_methods_heard2_notFull;

  // value method portalIfc_messageSize_size
  input  [15 : 0] portalIfc_messageSize_size_methodNumber;
  output [15 : 0] portalIfc_messageSize_size;
  output RDY_portalIfc_messageSize_size;

  // value method portalIfc_indications_0_first
  output [31 : 0] portalIfc_indications_0_first;
  output RDY_portalIfc_indications_0_first;

  // action method portalIfc_indications_0_deq
  input  EN_portalIfc_indications_0_deq;
  output RDY_portalIfc_indications_0_deq;

  // value method portalIfc_indications_0_notEmpty
  output portalIfc_indications_0_notEmpty;
  output RDY_portalIfc_indications_0_notEmpty;

  // value method portalIfc_indications_1_first
  output [31 : 0] portalIfc_indications_1_first;
  output RDY_portalIfc_indications_1_first;

  // action method portalIfc_indications_1_deq
  input  EN_portalIfc_indications_1_deq;
  output RDY_portalIfc_indications_1_deq;

  // value method portalIfc_indications_1_notEmpty
  output portalIfc_indications_1_notEmpty;
  output RDY_portalIfc_indications_1_notEmpty;

  // value method portalIfc_intr_status
  output portalIfc_intr_status;
  output RDY_portalIfc_intr_status;

  // value method portalIfc_intr_channel
  output [31 : 0] portalIfc_intr_channel;
  output RDY_portalIfc_intr_channel;

  // signals for module outputs
  wire [31 : 0] portalIfc_indications_0_first,
		portalIfc_indications_1_first,
		portalIfc_intr_channel;
  wire [15 : 0] portalIfc_messageSize_size;
  wire RDY_methods_heard2_enq,
       RDY_methods_heard2_notFull,
       RDY_methods_heard_enq,
       RDY_methods_heard_notFull,
       RDY_portalIfc_indications_0_deq,
       RDY_portalIfc_indications_0_first,
       RDY_portalIfc_indications_0_notEmpty,
       RDY_portalIfc_indications_1_deq,
       RDY_portalIfc_indications_1_first,
       RDY_portalIfc_indications_1_notEmpty,
       RDY_portalIfc_intr_channel,
       RDY_portalIfc_intr_status,
       RDY_portalIfc_messageSize_size,
       methods_heard2_notFull,
       methods_heard_notFull,
       portalIfc_indications_0_notEmpty,
       portalIfc_indications_1_notEmpty,
       portalIfc_intr_status;

  // register heard2_responseAdapter_bits
  reg [31 : 0] heard2_responseAdapter_bits;
  wire [31 : 0] heard2_responseAdapter_bits_D_IN;
  wire heard2_responseAdapter_bits_EN;

  // register heard2_responseAdapter_notEmptyReg
  reg heard2_responseAdapter_notEmptyReg;
  wire heard2_responseAdapter_notEmptyReg_D_IN,
       heard2_responseAdapter_notEmptyReg_EN;

  // register heard2_responseAdapter_shift
  reg [5 : 0] heard2_responseAdapter_shift;
  wire [5 : 0] heard2_responseAdapter_shift_D_IN;
  wire heard2_responseAdapter_shift_EN;

  // register heard_responseAdapter_bits
  reg [31 : 0] heard_responseAdapter_bits;
  wire [31 : 0] heard_responseAdapter_bits_D_IN;
  wire heard_responseAdapter_bits_EN;

  // register heard_responseAdapter_notEmptyReg
  reg heard_responseAdapter_notEmptyReg;
  wire heard_responseAdapter_notEmptyReg_D_IN,
       heard_responseAdapter_notEmptyReg_EN;

  // register heard_responseAdapter_shift
  reg [5 : 0] heard_responseAdapter_shift;
  wire [5 : 0] heard_responseAdapter_shift_D_IN;
  wire heard_responseAdapter_shift_EN;

  // action method methods_heard_enq
  assign RDY_methods_heard_enq = !heard_responseAdapter_notEmptyReg ;

  // value method methods_heard_notFull
  assign methods_heard_notFull = !heard_responseAdapter_notEmptyReg ;
  assign RDY_methods_heard_notFull = 1'd1 ;

  // action method methods_heard2_enq
  assign RDY_methods_heard2_enq = !heard2_responseAdapter_notEmptyReg ;

  // value method methods_heard2_notFull
  assign methods_heard2_notFull = !heard2_responseAdapter_notEmptyReg ;
  assign RDY_methods_heard2_notFull = 1'd1 ;

  // value method portalIfc_messageSize_size
  assign portalIfc_messageSize_size = 16'd32 ;
  assign RDY_portalIfc_messageSize_size = 1'd1 ;

  // value method portalIfc_indications_0_first
  assign portalIfc_indications_0_first = heard_responseAdapter_bits ;
  assign RDY_portalIfc_indications_0_first =
	     heard_responseAdapter_notEmptyReg ;

  // action method portalIfc_indications_0_deq
  assign RDY_portalIfc_indications_0_deq = heard_responseAdapter_notEmptyReg ;

  // value method portalIfc_indications_0_notEmpty
  assign portalIfc_indications_0_notEmpty =
	     heard_responseAdapter_notEmptyReg ;
  assign RDY_portalIfc_indications_0_notEmpty = 1'd1 ;

  // value method portalIfc_indications_1_first
  assign portalIfc_indications_1_first = heard2_responseAdapter_bits ;
  assign RDY_portalIfc_indications_1_first =
	     heard2_responseAdapter_notEmptyReg ;

  // action method portalIfc_indications_1_deq
  assign RDY_portalIfc_indications_1_deq =
	     heard2_responseAdapter_notEmptyReg ;

  // value method portalIfc_indications_1_notEmpty
  assign portalIfc_indications_1_notEmpty =
	     heard2_responseAdapter_notEmptyReg ;
  assign RDY_portalIfc_indications_1_notEmpty = 1'd1 ;

  // value method portalIfc_intr_status
  assign portalIfc_intr_status =
	     heard_responseAdapter_notEmptyReg ||
	     heard2_responseAdapter_notEmptyReg ;
  assign RDY_portalIfc_intr_status = 1'd1 ;

  // value method portalIfc_intr_channel
  assign portalIfc_intr_channel =
	     heard_responseAdapter_notEmptyReg ?
	       32'd0 :
	       (heard2_responseAdapter_notEmptyReg ? 32'd1 : 32'hFFFFFFFF) ;
  assign RDY_portalIfc_intr_channel = 1'd1 ;

  // register heard2_responseAdapter_bits
  assign heard2_responseAdapter_bits_D_IN = methods_heard2_enq_v ;
  assign heard2_responseAdapter_bits_EN = EN_methods_heard2_enq ;

  // register heard2_responseAdapter_notEmptyReg
  assign heard2_responseAdapter_notEmptyReg_D_IN =
	     !EN_portalIfc_indications_1_deq ;
  assign heard2_responseAdapter_notEmptyReg_EN =
	     EN_portalIfc_indications_1_deq || EN_methods_heard2_enq ;

  // register heard2_responseAdapter_shift
  assign heard2_responseAdapter_shift_D_IN = 6'h0 ;
  assign heard2_responseAdapter_shift_EN = 1'b0 ;

  // register heard_responseAdapter_bits
  assign heard_responseAdapter_bits_D_IN = methods_heard_enq_v ;
  assign heard_responseAdapter_bits_EN = EN_methods_heard_enq ;

  // register heard_responseAdapter_notEmptyReg
  assign heard_responseAdapter_notEmptyReg_D_IN =
	     !EN_portalIfc_indications_0_deq ;
  assign heard_responseAdapter_notEmptyReg_EN =
	     EN_portalIfc_indications_0_deq || EN_methods_heard_enq ;

  // register heard_responseAdapter_shift
  assign heard_responseAdapter_shift_D_IN = 6'h0 ;
  assign heard_responseAdapter_shift_EN = 1'b0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        heard2_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY 32'd0;
	heard2_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	heard2_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY 6'd0;
	heard_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY 32'd0;
	heard_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	heard_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY 6'd0;
      end
    else
      begin
        if (heard2_responseAdapter_bits_EN)
	  heard2_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY
	      heard2_responseAdapter_bits_D_IN;
	if (heard2_responseAdapter_notEmptyReg_EN)
	  heard2_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	      heard2_responseAdapter_notEmptyReg_D_IN;
	if (heard2_responseAdapter_shift_EN)
	  heard2_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY
	      heard2_responseAdapter_shift_D_IN;
	if (heard_responseAdapter_bits_EN)
	  heard_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY
	      heard_responseAdapter_bits_D_IN;
	if (heard_responseAdapter_notEmptyReg_EN)
	  heard_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	      heard_responseAdapter_notEmptyReg_D_IN;
	if (heard_responseAdapter_shift_EN)
	  heard_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY
	      heard_responseAdapter_shift_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    heard2_responseAdapter_bits = 32'hAAAAAAAA;
    heard2_responseAdapter_notEmptyReg = 1'h0;
    heard2_responseAdapter_shift = 6'h2A;
    heard_responseAdapter_bits = 32'hAAAAAAAA;
    heard_responseAdapter_notEmptyReg = 1'h0;
    heard_responseAdapter_shift = 6'h2A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkEchoIndicationOutputPipes

