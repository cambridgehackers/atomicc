# Copyright (c) 2014 Quanta Research Cambridge, Inc
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#
# File: Makefile.build
#

V?=0
ifeq ($(V),0)
  Q=@
  BSC_QUIET=-no-show-compiles
  CONNECTAL_NDK_PARAM="NDK_HOST_ECHO=true"
  FPGAMAKE_VERBOSE=
else
  Q=
  BSC_QUIET=
  CONNECTAL_NDK_PARAM=
  FPGAMAKE_VERBOSE=-v
endif
NDK_OBJCOPY=$(shell $(NDKPATH)ndk-which objcopy)

OBJCOPY?=$(NDK_OBJCOPY)
BINFILE?=bin/mkTop.xdevcfg.bin.gz
CONNECTAL_EXENAME?=ubuntu.exe
EXENAME=$(CONNECTAL_EXENAME)

VIVADO=$(shell which vivado)
export VIVADODIR=$(shell dirname $(shell dirname $(VIVADO))))
VIVADOFLAGS= -notrace

VFILE=verilog/$(MKTOP).v

all: exe bits extratarget

extratarget::
# placeholder for variant targets

    exe: $(EXENAME)

ifneq ($(CONNECTAL_NOHARDWARE),1)
BITS_DEPENDENCES ?= $(CONNECTAL_BITS_DEPENDENCES)
endif #hw/mkTop.bit prepare_bin_target

bits: $(BITS_DEPENDENCES) prepare_bin_target
ifneq ($(XILINX),)
ifeq ($(OS),android)
	@echo "zipping android"
	$(CONNECTALDIR)/scripts/reorderbytes.py hw/mkTop.bin bin/mkTop.xdevcfg.bin
	gzip -f bin/mkTop.xdevcfg.bin
else
ifneq ($(SIMULATION),)
	@echo "not zipping xilinx"
else
ifneq ($(AWSF1),)
	@echo "not zipping awsf1"
else
	@echo "zipping xilinx"
	gzip -c hw/mkTop.bin > bin/mkTop.bin.gz
endif # AWSF1
endif #xsim
endif #android
else #!xilinx
endif #!xilinx
	$(Q)if [ -f bin/$(EXENAME) -a -f "$(BINFILE)" ]; then $(OBJCOPY) --remove-section fpgadata bin/$(EXENAME); fi
	$(Q)if [ -f bin/$(EXENAME) -a -f "$(BINFILE)" ]; then $(OBJCOPY) --add-section fpgadata=$(BINFILE) bin/$(EXENAME); fi
	$(Q)if [ -f Impl/TopDown/top-post-route.dcp ]; then cp -f Impl/TopDown/top-post-route.dcp bin; fi
	$(Q)if [ -f Impl/TopDown/top-post-route-timing-summary.rpt ]; then $(CONNECTALDIR)/scripts/check-timing.py Impl/TopDown/top-post-route-timing-summary.rpt; fi
	$(Q)if [ -f Impl/TopDown/top-post-route-timing-summary.txt ]; then $(CONNECTALDIR)/scripts/check-timing.py Impl/TopDown/top-post-route-timing-summary.txt; fi

android.exe: prepare_bin_target
	+ndk-build $(CONNECTAL_NDK_PARAM)
	@cp -fv libs/armeabi/android.exe bin
	$(Q)if [ -f bin/mkTop.xdevcfg.bin.gz ]; then $(NDK_OBJCOPY) --remove-section fpgadata bin/android.exe; fi
	$(Q)if [ -f bin/mkTop.xdevcfg.bin.gz ]; then $(NDK_OBJCOPY) --add-section fpgadata=bin/mkTop.xdevcfg.bin.gz bin/android.exe; fi

VIVADODIR=$(realpath $(shell dirname $(VIVADO))/..)

XVLOGDEFINES = $(subst -D,-d,$(BSVDEFINES))

SVLOG = $(addprefix -svlog $(CONNECTALDIR)/verilog/, xsimtop.sv XsimDmaReadWrite.sv XsimLink.sv XsimSink.sv XsimSource.sv)

XCIDIRS = $(basename $(XCIFILES))
VLOG_PRJ_FILE = $(wildcard $(addsuffix /xsim/vlog.prj, $(XCIDIRS)))
VHDL_PRJ_FILE = $(wildcard $(addsuffix /xsim/vhdl.prj, $(XCIDIRS)))
# phony targets to trigger calls to xvlog and xvhdl
VLOG_PRJ_BLD  = $(addsuffix .bld, $(VLOG_PRJ_FILE))
VHDL_PRJ_BLD  = $(addsuffix .bld, $(VHDL_PRJ_FILE))

SV_SEARCH_PATH = $(addprefix -y , $(VERILOG_PATH))
SV_SEARCH_PATH += $(addprefix -y , $(addsuffix /submodules, $(VERILOG_PATH)))
SV_SEARCH_PATH += $(addprefix -y , $(addsuffix /submodules/mentor, $(VERILOG_PATH)))

verilog: $(VFILE)
	@echo "verilog"

prepare_bin_target:
	@mkdir -p bin jni
